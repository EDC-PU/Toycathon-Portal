rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins can do anything
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if request.auth != null;
      // Users can only read and update their own document
      allow read, update: if request.auth.uid == userId;
    }

    // Public collections (read-only for authenticated users)
    match /(announcements|categories|themes)/{docId} {
        allow read: if request.auth != null;
    }

    // Counters collection (for team ID generation)
    match /counters/teamIds {
      allow read, write: if request.auth != null; // Open for transaction by authenticated users.
    }

    // Teams collection
    match /teams/{teamId} {
        // Team creators can do anything with their own team
        allow create, update, delete: if request.auth.uid == resource.data.creatorUid;
        // Team creators and members of the team can read the team document
        allow read: if request.auth.uid == resource.data.creatorUid || 
                      (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId);
    }

    // Submissions collection
    match /submissions/{teamId} {
      // Only the creator of the corresponding team can create/update/read a submission
      allow read, write: if exists(/databases/$(database)/documents/teams/$(teamId)) &&
                           get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid;
    }
  }
}
