rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is a team creator
    function isTeamCreator(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid;
    }
    
    // Helper function to check if a user is trying to join a team
    function isJoiningTeam() {
      // Allow update if the user is adding a teamId for the first time and not changing other fields disallowed.
      return request.resource.data.keys().hasAll(['teamId']) && !resource.data.keys().has('teamId');
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                    || exists(/databases/$(database)/documents/teams/$(get(/databases/$(database)/documents/users/$(userId)).data.teamId))
                       && get(/databases/$(database)/documents/teams/$(get(/databases/$(database)/documents/users/$(userId)).data.teamId)).data.creatorUid == request.auth.uid
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == get(/databases/$(database)/documents/users/$(userId)).data.teamId;

      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      allow create: if request.auth.uid == userId;

      allow update: if request.auth.uid == userId && 
                       // Case 1: User is updating their own general info, but cannot add/change teamId or isAdmin status
                       (!request.resource.data.keys().hasAny(['teamId', 'isAdmin']) ||
                        (resource.data.teamId == request.resource.data.teamId && resource.data.isAdmin == request.resource.data.isAdmin))
                       // Case 2: User is joining a team for the first time
                    || (request.auth.uid == userId && 
                        request.resource.data.teamId != resource.data.teamId &&
                        resource.data.teamId == null)
                       // Case 3: Team leader is removing a member
                    || (isTeamCreator(resource.data.teamId) && 
                        request.resource.data.teamId == null && 
                        !request.resource.data.keys().hasAny(['email', 'displayName', 'isAdmin']));

      allow delete: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /teams/{teamId} {
      allow read: if isTeamCreator(teamId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
      allow create: if request.auth.uid != null;
      // Allow update only by the creator
      allow update: if isTeamCreator(teamId);
      // Allow delete only by the creator
      allow delete: if isTeamCreator(teamId);
    }
    
    match /submissions/{submissionId} {
      // submissionId is the teamId. Only team members or the creator can CRUD.
      function isTeamMemberOrCreator() {
        let teamId = submissionId;
        return isTeamCreator(teamId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
      }
      allow read, write: if isTeamMemberOrCreator();
    }
    
    match /announcements/{announcementId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /categories/{categoryId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /themes/{themeId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /counters/{counterId} {
      // Only backend processes can write to counters, not clients
      allow read, write: if false; 
    }
  }
}