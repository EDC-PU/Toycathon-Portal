rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Helper function to check if a user is a member of a given team
    function isTeamMember(teamId, userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.teamId == teamId;
    }

    // Rules for the users collection
    match /users/{userId} {
      // Allow users to create their own user document
      allow create: if request.auth != null;
      // Allow users to read their own document, or if they are in the same team
      allow read: if request.auth.uid == userId || isTeamMember(get(/databases/$(database)/documents/users/$(userId)).data.teamId, request.auth.uid);
      
      // Allow users to update their own document.
      // They can change any field except 'teamId' unless it's a new team join.
      // They cannot make themselves an admin.
      allow update: if request.auth.uid == userId
                    && request.resource.data.isAdmin == resource.data.isAdmin
                    && (
                      // Case 1: Joining a team for the first time
                      (resource.data.teamId == null && request.resource.data.teamId != null)
                      ||
                      // Case 2: Not changing teamId
                      request.resource.data.teamId == resource.data.teamId
                    );

      // Disallow deleting user documents for now
      allow delete: if false;
    }

    // Rules for the teams collection
    match /teams/{teamId} {
      // Allow authenticated users to create teams
      allow create: if request.auth != null;
      // Allow read if user is the creator or a member of the team
      allow read: if request.auth != null && (get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid || isTeamMember(teamId, request.auth.uid));
      // Allow update if user is the creator or a member of the team
      allow update: if request.auth != null && (get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid || isTeamMember(teamId, request.auth.uid));
      // Only the creator can delete the team
      allow delete: if request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid;
    }

    // Rules for submissions
    match /submissions/{teamId} {
       // Allow read/write if the user is a member of the team
      allow read, write: if request.auth != null && isTeamMember(teamId, request.auth.uid);
    }
    
    // Default admin-only access for sensitive collections
    match /announcements/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid);
    }
    
    match /categories/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid);
    }
    
    match /themes/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid);
    }

    match /counters/{docId} {
        allow read, write: if request.auth != null;
    }

    // Admin access to all documents for management
    match /{document=**} {
      allow read, write: if isAdmin(request.auth.uid);
    }
  }
}
