rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to a specific team
    function isTeamMember(teamId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // ANY authenticated user can create their own user document.
      allow create: if request.auth.uid == userId;

      // A user can READ their own document.
      // A user can also READ another user's document if they are both in the same team.
      allow read: if request.auth.uid == userId 
                  || (
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      exists(/databases/$(database)/documents/users/$(userId)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == get(/databases/$(database)/documents/users/$(userId)).data.teamId &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId != null
                  );

      // A user can QUERY the users collection only if they are filtering by a teamId
      // and that teamId matches their own.
      allow list: if request.query.where.keys().hasAny(['teamId'])
                  && request.query.where.teamId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId;

      // A user can UPDATE their own document.
      // The rule handles two cases:
      // 1. A user is filling out their profile for the first time.
      // 2. A user is joining a team by adding a `teamId`.
      allow update: if request.auth.uid == userId;
      
      // A user can DELETE their own document. Admins can delete any user.
      allow delete: if request.auth.uid == userId;
    }

    // Rules for the 'teams' collection
    match /teams/{teamId} {
      // ANY authenticated user can create a team. The creator is stored in the document.
      allow create: if request.auth != null;

      // A user can READ a team document if:
      // 1. They are the creator of the team.
      // 2. Their user document has a teamId that matches this team document.
      allow read: if request.auth.uid == resource.data.creatorUid || isTeamMember(teamId);
      
      // A user can UPDATE a team document if they are the creator or a member.
      allow update: if request.auth.uid == resource.data.creatorUid || isTeamMember(teamId);
      
      // Only the creator can DELETE a team.
      allow delete: if request.auth.uid == resource.data.creatorUid;
    }
    
     // Rules for the 'submissions' collection
    match /submissions/{submissionId} {
      // A user can create/update their submission if they are a member of that team
      allow write: if isTeamMember(submissionId);
      // A user can read a submission if they are a member of that team
      allow read: if isTeamMember(submissionId);
    }

    // Rules for admin-managed collections
    match /announcements/{docId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /counters/{docId} {
       allow read, write: if request.auth != null;
    }

    match /categories/{docId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /themes/{docId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
