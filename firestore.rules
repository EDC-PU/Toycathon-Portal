rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeamCreator(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid;
    }
    
    function isTeamMember(teamId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
    }

    match /users/{userId} {
      allow create: if isUserAuthenticated();
      allow read: if isUserAuthenticated() && isOwner(userId);
      
      allow list: if isUserAuthenticated() && isTeamMember(request.query.where.teamId);

      allow update: if isUserAuthenticated() && isOwner(userId) && (
        // Case 1: Updating general profile info, but NOT changing teamId
        (!('teamId' in request.resource.data) || request.resource.data.teamId == resource.data.teamId) ||
        // Case 2: Joining a team for the first time (teamId doesn't exist yet)
        !('teamId' in resource.data)
      );

      // Rule for a team leader to remove a member
      allow update: if isUserAuthenticated() &&
                       exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
                       isTeamCreator(resource.data.teamId) &&
                       request.resource.data.teamId == null &&
                       resource.data.teamId != null;

      allow delete: if false; // Deleting users should be done via admin tools/functions
    }

    match /teams/{teamId} {
      allow create: if isUserAuthenticated();
      allow read: if isUserAuthenticated() && (isTeamCreator(teamId) || isTeamMember(teamId));
      allow update: if isUserAuthenticated() && isTeamCreator(teamId);
      allow delete: if isUserAuthenticated() && isTeamCreator(teamId);
    }
    
    match /submissions/{submissionId} {
      allow read, write: if isUserAuthenticated() && isTeamMember(submissionId);
    }

    match /announcements/{announcementId} {
      allow read: if isUserAuthenticated();
      allow create, delete: if isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /categories/{categoryId} {
        allow read: if true;
        allow create, delete: if isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /themes/{themeId} {
        allow read: if true;
        allow create, update, delete: if isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /counters/{counterId} {
      allow read, write: if isUserAuthenticated(); // Needs to be writable for transactions
    }
  }
}
