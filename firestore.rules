rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // USERS collection
    match /users/{userId} {
      // Admins can read and write any user document
      allow read, write: if isAdmin(request.auth.uid);
      
      // A user can create their own document, and read/update it.
      // They cannot delete their own user document through the client.
      allow create, read, update: if isOwner(userId);
      allow delete: if false; // Deletion should be an admin action
    }

    // TEAMS collection
    match /teams/{teamId} {
        // Admins can manage all teams
        allow read, write, delete: if isAdmin(request.auth.uid);
        
        // Any authenticated user can read any team's data (e.g., for joining)
        allow read: if request.auth != null;
        
        // An authenticated user can create a team
        allow create: if request.auth != null;
        
        // A user can update a team if they are the creator OR a member of that team
        allow update: if request.auth.uid == resource.data.creatorUid || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;

        // Only the creator can delete their team
        allow delete: if request.auth.uid == resource.data.creatorUid;
    }
    
    // SUBMISSIONS collection
    match /submissions/{teamId} {
        // Admins can read/write any submission
        allow read, write: if isAdmin(request.auth.uid);
        
        // A user can read a submission if they are the creator of the corresponding team
        // or a member of that team.
        allow read: if get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;

        // A user can create/update a submission if they are the creator of the team
        // or a member of that team.
        allow create, update: if get(/databases/$(database)/documents/teams/$(teamId)).data.creatorUid == request.auth.uid ||
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;

        // Submissions can't be deleted by users.
        allow delete: if false;
    }

    // Public collections (Announcements, Categories, Themes)
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid); // Only admins can create/update/delete
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    match /themes/{themeId} {
       allow read: if true;
       allow write: if isAdmin(request.auth.uid);
    }

    // COUNTERS collection for generating team IDs
    match /counters/{counterId} {
        // Should only be accessible from a trusted server environment (e.g., Cloud Functions)
        // For this prototype, we'll allow admin writes.
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }
  }
}
